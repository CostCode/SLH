/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package edu.cmu.cc.slh.dao;

import edu.cmu.cc.slh.dto.*;
import edu.cmu.cc.slh.exceptions.*;

public interface TblHotspotsDao
{
	/** 
	 * Inserts a new row in the TBL_HotSpots table.
	 */
	public TblHotspotsPk insert(TblHotspots dto) throws TblHotspotsDaoException;

	/** 
	 * Updates a single row in the TBL_HotSpots table.
	 */
	public void update(TblHotspotsPk pk, TblHotspots dto) throws TblHotspotsDaoException;
	public void secupdate(TblHotspots pk, TblHotspots dto) throws TblHotspotsDaoException;
	/** 
	 * Deletes a single row in the TBL_HotSpots table.
	 */
	public void delete(TblHotspots pk) throws TblHotspotsDaoException;

	/** 
	 * Returns the rows from the TBL_HotSpots table that matches the specified primary-key value.
	 */
	public TblHotspots findByPrimaryKey(TblHotspotsPk pk) throws TblHotspotsDaoException;

	/** 
	 * Returns all rows from the TBL_HotSpots table that match the criteria 'CID = :cid'.
	 */
	public TblHotspots findByPrimaryKey(int cid) throws TblHotspotsDaoException;

	/** 
	 * Returns all rows from the TBL_HotSpots table that match the criteria ''.
	 */
	public TblHotspots[] findAll() throws TblHotspotsDaoException;

	/** 
	 * Returns all rows from the TBL_HotSpots table that match the criteria 'MID = :mid'.
	 */
	public TblHotspots[] findByTblFloormaps(int mid) throws TblHotspotsDaoException;

	/** 
	 * Returns all rows from the TBL_HotSpots table that match the criteria 'SID = :sid'.
	 */
	public TblHotspots[] findByTblCategories(int sid) throws TblHotspotsDaoException;

	/** 
	 * Returns all rows from the TBL_HotSpots table that match the criteria 'MID = :mid'.
	 */
	public TblHotspots[] findWhereMidEquals(int mid) throws TblHotspotsDaoException;

	/** 
	 * Returns all rows from the TBL_HotSpots table that match the criteria 'Coordinates = :coordinates'.
	 */
	public TblHotspots[] findWhereCoordinatesEquals(String coordinates) throws TblHotspotsDaoException;

	/** 
	 * Returns all rows from the TBL_HotSpots table that match the criteria 'SID = :sid'.
	 */
	public TblHotspots[] findWhereSidEquals(int sid) throws TblHotspotsDaoException;

	/** 
	 * Returns all rows from the TBL_HotSpots table that match the criteria 'CID = :cid'.
	 */
	public TblHotspots[] findWhereCidEquals(int cid) throws TblHotspotsDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the TBL_HotSpots table that match the specified arbitrary SQL statement
	 */
	public TblHotspots[] findByDynamicSelect(String sql, Object[] sqlParams) throws TblHotspotsDaoException;

	/** 
	 * Returns all rows from the TBL_HotSpots table that match the specified arbitrary SQL statement
	 */
	public TblHotspots[] findByDynamicWhere(String sql, Object[] sqlParams) throws TblHotspotsDaoException;

}
